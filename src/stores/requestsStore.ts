import { create } from "zustand";
import { RequestTicket, TaskFilters } from "../types/request";
import { requestsService } from "../services/requestsService";

type RequestsState = {
  allRequests: RequestTicket[]; // –í—Å–µ –∑–∞—è–≤–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
  filteredRequests: RequestTicket[]; // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
  filters: TaskFilters;
  isLoading: boolean;
  error: string | null;
  fetchRequests: () => Promise<void>;
  updateFilters: (filters: TaskFilters) => void;
  getById: (id: string) => RequestTicket | undefined;
  addComment: (id: string, message: string) => Promise<any>;
  addPhoto: (id: string, file: File) => Promise<any>;
  updateCoords: (id: string, lat: number, lng: number) => Promise<any>;
};

export const useRequestsStore = create<RequestsState>((set, get) => ({
  allRequests: [],
  filteredRequests: [],
  filters: {},
  isLoading: false,
  error: null,
  fetchRequests: async () => {
    console.log("üöÄ Store: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∑–∞–¥–∞—á");
    set({ isLoading: true, error: null });
    try {
      const response = await requestsService.list();
      console.log("‚úÖ Store: –ü–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç:", response);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
      let allRequests: RequestTicket[] = [];
      if (Array.isArray(response)) {
        allRequests = response;
      } else if (
        response &&
        response.data &&
        Array.isArray(response.data.tasks)
      ) {
        allRequests = response.data.tasks;
      } else if (response && Array.isArray(response.tasks)) {
        allRequests = response.tasks;
      } else if (response && Array.isArray(response.data)) {
        allRequests = response.data;
      } else {
        console.warn("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:", response);
        allRequests = [];
      }

      console.log("‚úÖ Store: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:", allRequests);

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
      const filteredRequests = applyFilters(allRequests, get().filters);

      set({ allRequests, filteredRequests });
    } catch (e: any) {
      console.error("‚ùå Store: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", e);
      set({ error: e?.message ?? "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞—è–≤–∫–∏" });
    } finally {
      set({ isLoading: false });
    }
  },
  updateFilters: (filters) => {
    console.log("üîç Store: –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã:", filters);
    const filteredRequests = applyFilters(get().allRequests, filters);
    set({ filters, filteredRequests });
  },
  getById: (id) => get().allRequests.find((r) => r.id === id),
  addComment: async (id, message) => {
    const result = await requestsService.addComment(id, message);
    return result;
  },
  addPhoto: async (id, file) => {
    const result = await requestsService.addPhoto(id, file);
    return result;
  },
  updateCoords: async (id, lat, lng) => {
    const result = await requestsService.updateCoords(id, lat, lng);
    return result;
  },
}));

// –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
function applyFilters(
  requests: RequestTicket[],
  filters: TaskFilters
): RequestTicket[] {
  if (!Array.isArray(requests)) {
    console.error("applyFilters: requests –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:", requests);
    return [];
  }

  let filtered = [...requests];

  // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏—é
  if (filters.search) {
    const searchLower = filters.search.toLowerCase();
    filtered = filtered.filter(
      (task) =>
        task.title?.toLowerCase().includes(searchLower) ||
        task.description?.toLowerCase().includes(searchLower) ||
        task.client?.toLowerCase().includes(searchLower) ||
        task.contract_number?.toLowerCase().includes(searchLower)
    );
  }

  // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
  if (filters.status !== undefined && filters.status !== "") {
    const statusValue = filters.status === "true";
    filtered = filtered.filter((task) => Boolean(task.status) === statusValue);
  }

  // –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
  if (filters.priority !== undefined && filters.priority !== "") {
    const priorityValue = filters.priority === "true";
    filtered = filtered.filter(
      (task) => Boolean(task.priority) === priorityValue
    );
  }

  console.log("üîç –ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã:", filters, "–†–µ–∑—É–ª—å—Ç–∞—Ç:", filtered.length);
  return filtered;
}
