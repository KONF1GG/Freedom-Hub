import { useEffect } from "react";
import { Link } from "react-router-dom";
import { useRequestsStore } from "../../stores/requestsStore";
import type { TaskFilters } from "../../types/request";
import MapPreview from "../../components/ui/MapPreview";
import ClickableDataField from "../../components/ui/ClickableDataField";

function formatRange(start?: string, end?: string) {
  if (!start) return "";
  const s = new Date(start);
  const e = end ? new Date(end) : undefined;
  const pad = (n: number) => String(n).padStart(2, "0");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–π
  const today = new Date();
  const tomorrow = new Date(today);
  tomorrow.setDate(tomorrow.getDate() + 1);

  const isToday = s.toDateString() === today.toDateString();
  const isTomorrow = s.toDateString() === tomorrow.toDateString();

  let datePrefix = "";
  if (isToday) {
    datePrefix = "–°–µ–≥–æ–¥–Ω—è ";
  } else if (isTomorrow) {
    datePrefix = "–ó–∞–≤—Ç—Ä–∞ ";
  }

  const ds = `${pad(s.getDate())}.${pad(
    s.getMonth() + 1
  )}.${s.getFullYear()} ${pad(s.getHours())}:${pad(s.getMinutes())}`;
  if (!e) return `${datePrefix}${ds}`;
  const de = `${pad(e.getHours())}:${pad(e.getMinutes())}`;
  return `${datePrefix}${ds} - ${de}`;
}

interface RequestsListProps {
  filters: TaskFilters;
}

export default function RequestsList({ filters }: RequestsListProps) {
  const {
    filteredRequests,
    allRequests,
    isLoading,
    error,
    fetchRequests,
    updateFilters,
  } = useRequestsStore();

  useEffect(() => {
    console.log("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏");
    fetchRequests();
  }, [fetchRequests]);

  useEffect(() => {
    console.log("üîç –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã:", filters);
    updateFilters(filters);
  }, [filters, updateFilters]);

  useEffect(() => {
    console.log("üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á:", {
      isLoading,
      error,
      count: filteredRequests.length,
      requests: filteredRequests.slice(0, 2), // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    });
  }, [filteredRequests, isLoading, error]);

  return (
    <div className="requests-scroll-container">
      <div className="requests-list">
        {isLoading && (
          <div className="card loading-state">
            <div className="card-body text-center">
              <div className="loading-icon mb-3" style={{ fontSize: "2.5rem" }}>
                ‚è≥
              </div>
              <div className="text-secondary">–ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏...</div>
              <div className="text-muted mt-2" style={{ fontSize: "0.875rem" }}>
                –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ
              </div>
            </div>
          </div>
        )}
        {error && (
          <div className="card error-state">
            <div className="card-body text-center">
              <div className="error-icon mb-3" style={{ fontSize: "3rem" }}>
                ‚ö†Ô∏è
              </div>
              <h3 className="error-title mb-3">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏</h3>
              <div className="error-description text-secondary mb-4">
                {error}
              </div>
              <div className="error-suggestions">
                <div
                  className="text-muted mb-2"
                  style={{ fontSize: "0.875rem" }}
                >
                  <strong>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</strong>
                </div>
                <ul
                  className="empty-state-list text-start"
                  style={{ fontSize: "0.875rem" }}
                >
                  <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É</li>
                  <li>–ü–æ—Ç—è–Ω–∏—Ç–µ —ç–∫—Ä–∞–Ω –≤–Ω–∏–∑ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</li>
                  <li>–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</li>
                </ul>
              </div>
            </div>
          </div>
        )}
        {filteredRequests.length === 0 && !isLoading && !error && (
          <div className="card empty-state">
            <div className="card-body text-center">
              {allRequests.length === 0 ? (
                // –°–ª—É—á–∞–π –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ–æ–±—â–µ –Ω–µ—Ç
                <>
                  <div
                    className="empty-state-icon mb-4"
                    style={{ fontSize: "4rem" }}
                  >
                    üì≠
                  </div>
                  <h3 className="empty-state-title mb-3">–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á</h3>
                  <div className="empty-state-description text-secondary mb-4">
                    –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏.
                    <br />
                    –û–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã.
                  </div>
                  <div className="empty-state-suggestions">
                    <div
                      className="text-muted mb-2"
                      style={{ fontSize: "0.875rem" }}
                    >
                      <strong>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</strong>
                    </div>
                    <ul
                      className="empty-state-list text-start"
                      style={{ fontSize: "0.875rem" }}
                    >
                      <li>–ó–∞–¥–∞—á–∏ –µ—â–µ –Ω–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã</li>
                      <li>–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É</li>
                      <li>–ü–æ—Ç—è–Ω–∏—Ç–µ —ç–∫—Ä–∞–Ω –≤–Ω–∏–∑ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</li>
                    </ul>
                  </div>
                </>
              ) : (
                // –°–ª—É—á–∞–π –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, –Ω–æ —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç
                <>
                  <div
                    className="empty-state-icon mb-4"
                    style={{ fontSize: "4rem" }}
                  >
                    üîç
                  </div>
                  <h3 className="empty-state-title mb-3">–ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                  <div className="empty-state-description text-secondary mb-4">
                    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.
                  </div>
                </>
              )}
            </div>
          </div>
        )}

        {filteredRequests.map((task: any) => (
          <Link
            key={task.id}
            to={`/tasks/${task.id}`}
            className="card request-card"
          >
            <div className="card-body">
              <div className="request-layout">
                {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –¥–∞–Ω–Ω—ã–µ */}
                <div className="request-data">
                  {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º */}
                  <div className="request-header">
                    <div className="request-number">
                      <span className="text-primary">{task.id}</span>
                    </div>
                  </div>

                  {/* –í—Ä–µ–º—è –ø–æ–¥ ID */}
                  <div className="request-datetime">
                    <div className="datetime-value">
                      {formatRange(task.begin_date, task.due_date)}
                    </div>
                  </div>

                  <div className="request-details">
                    <div className="request-detail">
                      <span className="text-muted">–¢–∏–ø:</span>
                      <span className="text-primary">
                        {task.objectType || "-"}
                      </span>
                    </div>
                    <div className="request-detail">
                      <span className="text-muted">–£—Å–ª—É–≥–∞:</span>
                      <span className="text-primary">
                        {task.serviceType || "-"}
                      </span>
                    </div>
                    <div className="request-detail">
                      <span className="text-muted">–ö–ª–∏–µ–Ω—Ç:</span>
                      <span className="text-primary">{task.client || "-"}</span>
                    </div>
                    {task.contract_number && (
                      <div className="request-detail">
                        <span className="text-muted">–î–æ–≥–æ–≤–æ—Ä:</span>
                        <span className="text-primary">
                          {task.contract_number}
                        </span>
                      </div>
                    )}
                  </div>
                </div>

                {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –∫–∞—Ä—Ç–∞ –∏ —Å—Ç–∞—Ç—É—Å—ã */}
                <div className="request-right">
                  {/* –°—Ç–∞—Ç—É—Å—ã */}
                  <div className="request-statuses">
                    <div
                      className={`request-status ${
                        task.status ? "text-success" : "text-danger"
                      }`}
                    >
                      <div
                        className="status-dot"
                        style={{
                          backgroundColor: task.status
                            ? "var(--color-success)"
                            : "var(--color-danger)",
                        }}
                      ></div>
                      <span>{task.status ? "–í—ã–ø–æ–ª–Ω–µ–Ω–∞" : "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"}</span>
                    </div>

                    <div
                      className={`request-priority ${
                        task.priority ? "text-warning" : "text-muted"
                      }`}
                    >
                      <svg
                        width="12"
                        height="12"
                        fill="currentColor"
                        viewBox="0 0 20 20"
                      >
                        <path
                          fillRule="evenodd"
                          d="M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z"
                          clipRule="evenodd"
                        />
                      </svg>
                      <span>{task.priority ? "–í–Ω–µ–æ—á–µ—Ä–µ–¥–Ω–∞—è" : "–û–±—ã—á–Ω–∞—è"}</span>
                    </div>
                  </div>

                  {/* –ö–∞—Ä—Ç–∞ */}
                  {task.coordinates?.lat && task.coordinates?.lng && (
                    <div className="request-map-container">
                      {task.address && (
                        <ClickableDataField value={task.address} />
                      )}
                      <div className="request-map">
                        <MapPreview
                          lat={task.coordinates.lat}
                          lng={task.coordinates.lng}
                        />
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </Link>
        ))}
      </div>
    </div>
  );
}
