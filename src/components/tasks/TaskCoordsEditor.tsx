import { useState } from "react";
import MapPreview from "../ui/MapPreview";
import LeafletMap from "../ui/LeafletMap";

interface TaskCoordsEditorProps {
  lat?: number;
  lng?: number;
  onSave?: (lat: number, lng: number) => void;
}

export default function TaskCoordsEditor({
  lat: initialLat,
  lng: initialLng,
  onSave,
}: TaskCoordsEditorProps) {
  const [lat, setLat] = useState(initialLat || 0);
  const [lng, setLng] = useState(initialLng || 0);
  const [isEditing, setIsEditing] = useState(false);
  const [selectionMode, setSelectionMode] = useState<
    "current" | "map" | "manual" | null
  >(null);
  const [tempLat, setTempLat] = useState(initialLat || 55.7558);
  const [tempLng, setTempLng] = useState(initialLng || 37.6176);

  const handleSave = () => {
    if (onSave) {
      onSave(lat, lng);
    }
    setIsEditing(false);
    setSelectionMode(null);
  };

  const handleCancel = () => {
    setLat(initialLat || 0);
    setLng(initialLng || 0);
    setIsEditing(false);
    setSelectionMode(null);
  };

  const handleCurrentLocation = () => {
    setSelectionMode("current");
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          setLat(position.coords.latitude);
          setLng(position.coords.longitude);
          setSelectionMode(null);
          handleSave();
        },
        (error) => {
          console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:", error);
          alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ");
          setSelectionMode(null);
        }
      );
    } else {
      alert("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º");
      setSelectionMode(null);
    }
  };

  const handleMapClick = () => {
    if (selectionMode === "map") {
      setLat(tempLat);
      setLng(tempLng);
      setSelectionMode(null);
      handleSave();
    }
  };

  const handleManualCoords = () => {
    setSelectionMode("manual");
  };

  const handleMapSelection = () => {
    setTempLat(lat || 55.7558);
    setTempLng(lng || 37.6176);
    setSelectionMode("map");
  };

  // –ï—Å–ª–∏ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä
  if (!isEditing) {
    return (
      <div className="coords-view-simple">
        <div className="coords-header-simple">
          <h3>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</h3>
          <button
            onClick={() => setIsEditing(true)}
            className="btn-simple btn-edit"
          >
            –ò–∑–º–µ–Ω–∏—Ç—å
          </button>
        </div>

        {lat && lng ? (
          <div className="coords-display-simple">
            <div className="coords-values-simple">
              <span>–®–∏—Ä–æ—Ç–∞: {lat.toFixed(6)}</span>
              <span>–î–æ–ª–≥–æ—Ç–∞: {lng.toFixed(6)}</span>
            </div>
            <MapPreview lat={lat} lng={lng} />
          </div>
        ) : (
          <div className="coords-empty-simple">
            <p>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –∑–∞–¥–∞–Ω—ã</p>
          </div>
        )}
      </div>
    );
  }

  // –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏–∫–∞–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
  if (!selectionMode) {
    return (
      <div className="coords-menu-simple">
        <div className="coords-header-simple">
          <h3>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±</h3>
          <button onClick={handleCancel} className="btn-simple btn-cancel">
            ‚úï
          </button>
        </div>

        <div className="selection-buttons-simple">
          <button
            onClick={handleCurrentLocation}
            className="btn-simple btn-location"
          >
            üìç –¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
          </button>
          <button
            onClick={handleManualCoords}
            className="btn-simple btn-manual"
          >
            ‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é
          </button>
          <button onClick={handleMapSelection} className="btn-simple btn-map">
            üó∫Ô∏è –í—ã–±—Ä–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ
          </button>
        </div>
      </div>
    );
  }

  // –†–µ–∂–∏–º –≤–≤–æ–¥–∞ –≤—Ä—É—á–Ω—É—é
  if (selectionMode === "manual") {
    return (
      <div className="manual-coords-simple">
        <div className="coords-header-simple">
          <h3>–í–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç</h3>
          <button
            onClick={() => setSelectionMode(null)}
            className="btn-simple btn-back"
          >
            ‚Üê –ù–∞–∑–∞–¥
          </button>
        </div>

        <div className="coords-inputs-simple">
          <input
            type="number"
            step="0.000001"
            value={lat || ""}
            onChange={(e) => setLat(Number(e.target.value))}
            className="form-input-simple"
            placeholder="–®–∏—Ä–æ—Ç–∞ (55.7558)"
            min="-90"
            max="90"
          />
          <input
            type="number"
            step="0.000001"
            value={lng || ""}
            onChange={(e) => setLng(Number(e.target.value))}
            className="form-input-simple"
            placeholder="–î–æ–ª–≥–æ—Ç–∞ (37.6176)"
            min="-180"
            max="180"
          />
        </div>

        <div className="coords-buttons-simple">
          <button
            onClick={handleSave}
            className="btn-simple btn-save"
            disabled={!lat || !lng}
          >
            ‚úì –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </button>
        </div>
      </div>
    );
  }

  // –†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
  if (selectionMode === "map") {
    return (
      <div className="map-selection-simple">
        <div className="coords-header-simple">
          <h3>–í—ã–±–æ—Ä –Ω–∞ –∫–∞—Ä—Ç–µ</h3>
          <button
            onClick={() => setSelectionMode(null)}
            className="btn-simple btn-back"
          >
            ‚Üê –ù–∞–∑–∞–¥
          </button>
        </div>

        <div className="map-container-simple">
          <LeafletMap
            lat={tempLat}
            lng={tempLng}
            onCoordsChange={(lat, lng) => {
              setTempLat(lat);
              setTempLng(lng);
            }}
          />
        </div>

        <div className="map-coords-display-simple">
          <div className="coords-display-simple">
            <span>–®–∏—Ä–æ—Ç–∞: {tempLat.toFixed(6)}</span>
            <span>–î–æ–ª–≥–æ—Ç–∞: {tempLng.toFixed(6)}</span>
          </div>
        </div>

        <div className="map-buttons-simple">
          <button onClick={handleMapClick} className="btn-simple btn-save">
            ‚úì –í—ã–±—Ä–∞—Ç—å —ç—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
          </button>
        </div>
      </div>
    );
  }

  // –†–µ–∂–∏–º –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
  if (selectionMode === "current") {
    return (
      <div className="current-location-simple">
        <div className="coords-header-simple">
          <h3>–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è</h3>
          <button
            onClick={() => setSelectionMode(null)}
            className="btn-simple btn-back"
          >
            ‚Üê –ù–∞–∑–∞–¥
          </button>
        </div>

        <div className="loading-simple">
          <div className="spinner-simple"></div>
          <p>–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...</p>
        </div>
      </div>
    );
  }

  return null;
}
