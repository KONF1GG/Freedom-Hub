#!/bin/bash

echo "üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –î–ò–°–ö–û–í–û–ì–û –ü–†–û–°–¢–†–ê–ù–°–¢–í–ê"
echo "=========================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
format_size() {
    local size=$1
    if [ $size -gt 1073741824 ]; then
        echo "$(echo "scale=2; $size/1073741824" | bc) GB"
    elif [ $size -gt 1048576 ]; then
        echo "$(echo "scale=2; $size/1048576" | bc) MB"
    elif [ $size -gt 1024 ]; then
        echo "$(echo "scale=2; $size/1024" | bc) KB"
    else
        echo "${size} B"
    fi
}

echo ""
echo "üìä –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–ò–°–ö–ê–•"
echo "=============================="

# –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–∞—Ö
echo -e "${BLUE}üíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–∞—Ö:${NC}"
df -h | grep -E "^/dev|^Filesystem" | while read line; do
    echo "   $line"
done

echo ""
echo -e "${BLUE}üß† –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ inode:${NC}"
df -i | grep -E "^/dev|^Filesystem" | while read line; do
    echo "   $line"
done

echo ""
echo "üîç –ê–ù–ê–õ–ò–ó –°–ê–ú–´–• –¢–Ø–ñ–ï–õ–´–• –§–ê–ô–õ–û–í"
echo "================================"

# –¢–æ–ø-20 —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
echo -e "${GREEN}üìÅ –¢–û–ü-20 —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤:${NC}"
find / -type f -exec ls -la {} \; 2>/dev/null | \
    awk '{print $5, $9}' | \
    sort -nr | \
    head -20 | \
    while read size path; do
        if [ -n "$size" ] && [ -n "$path" ]; then
            formatted_size=$(format_size $size)
            echo "   $formatted_size -> $path"
        fi
    done

echo ""
echo -e "${GREEN}üìÅ –¢–û–ü-20 —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ):${NC}"
find / -type f -readable -exec ls -la {} \; 2>/dev/null | \
    awk '{print $5, $9}' | \
    sort -nr | \
    head -20 | \
    while read size path; do
        if [ -n "$size" ] && [ -n "$path" ]; then
            formatted_size=$(format_size $size)
            echo "   $formatted_size -> $path"
        fi
    done

echo ""
echo "üìÇ –ê–ù–ê–õ–ò–ó –ü–û –î–ò–†–ï–ö–¢–û–†–ò–Ø–ú"
echo "========================"

# –¢–æ–ø-20 —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
echo -e "${YELLOW}üìÇ –¢–û–ü-20 —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:${NC}"
du -h / 2>/dev/null | sort -hr | head -20 | while read size path; do
    echo "   $size -> $path"
done

echo ""
echo "üîç –ê–ù–ê–õ–ò–ó –ü–û –¢–ò–ü–ê–ú –§–ê–ô–õ–û–í"
echo "=========================="

# –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º —Ñ–∞–π–ª–æ–≤
echo -e "${PURPLE}üìã –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º —Ñ–∞–π–ª–æ–≤:${NC}"
find / -type f -name "*.*" 2>/dev/null | \
    sed 's/.*\.//' | \
    sort | \
    uniq -c | \
    sort -nr | \
    head -15 | \
    while read count ext; do
        echo "   $count —Ñ–∞–π–ª–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .$ext"
    done

echo ""
echo "üìÅ –ê–ù–ê–õ–ò–ó –ü–û –†–ê–ó–ú–ï–†–ê–ú"
echo "====================="

# –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º
echo -e "${CYAN}üìä –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º:${NC}"

# –§–∞–π–ª—ã –±–æ–ª—å—à–µ 1GB
gb_count=$(find / -type f -size +1G 2>/dev/null | wc -l)
echo "   –§–∞–π–ª—ã > 1GB: $gb_count"

# –§–∞–π–ª—ã –±–æ–ª—å—à–µ 100MB
mb_count=$(find / -type f -size +100M 2>/dev/null | wc -l)
echo "   –§–∞–π–ª—ã > 100MB: $mb_count"

# –§–∞–π–ª—ã –±–æ–ª—å—à–µ 10MB
mb10_count=$(find / -type f -size +10M 2>/dev/null | wc -l)
echo "   –§–∞–π–ª—ã > 10MB: $mb10_count"

echo ""
echo "üê≥ DOCKER –ê–ù–ê–õ–ò–ó"
echo "================"

# –ê–Ω–∞–ª–∏–∑ Docker
if command -v docker &> /dev/null; then
    echo -e "${BLUE}üê≥ Docker –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:${NC}"
    
    # –†–∞–∑–º–µ—Ä Docker
    docker_size=$(docker system df 2>/dev/null | grep "Total Space" | awk '{print $3}')
    if [ -n "$docker_size" ]; then
        echo "   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä Docker: $docker_size"
    fi
    
    # –†–∞–∑–º–µ—Ä –æ–±—Ä–∞–∑–æ–≤
    echo "   –†–∞–∑–º–µ—Ä—ã Docker –æ–±—Ä–∞–∑–æ–≤:"
    docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}" 2>/dev/null | head -10 | while read line; do
        echo "     $line"
    done
    
    # –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    echo "   –†–∞–∑–º–µ—Ä—ã Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    docker ps -s --format "table {{.Names}}\t{{.Size}}" 2>/dev/null | head -10 | while read line; do
        echo "     $line"
    done
else
    echo "   Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

echo ""
echo "üìÅ –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í"
echo "==============="

# –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤
echo -e "${RED}üìã –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤:${NC}"
log_dirs=("/var/log" "/var/log/nginx" "/var/log/apache2" "/var/log/mysql" "/var/log/docker")
for dir in "${log_dirs[@]}"; do
    if [ -d "$dir" ]; then
        log_size=$(du -sh "$dir" 2>/dev/null | cut -f1)
        echo "   $dir: $log_size"
        
        # –¢–æ–ø-5 —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö –ª–æ–≥–æ–≤
        find "$dir" -type f -name "*.log" -exec ls -la {} \; 2>/dev/null | \
            awk '{print $5, $9}' | \
            sort -nr | \
            head -5 | \
            while read size path; do
                if [ -n "$size" ] && [ -n "$path" ]; then
                    formatted_size=$(format_size $size)
                    echo "     $formatted_size -> $(basename $path)"
                fi
            done
    fi
done

echo ""
echo "üíæ –ê–ù–ê–õ–ò–ó –í–†–ï–ú–ï–ù–ù–´–• –§–ê–ô–õ–û–í"
echo "==========================="

# –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
echo -e "${YELLOW}üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:${NC}"
temp_dirs=("/tmp" "/var/tmp" "/var/cache" "/tmp" "/var/spool")
for dir in "${temp_dirs[@]}"; do
    if [ -d "$dir" ]; then
        temp_size=$(du -sh "$dir" 2>/dev/null | cut -f1)
        echo "   $dir: $temp_size"
    fi
done

echo ""
echo "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô"
echo "==========================="

# –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
echo -e "${PURPLE}üë§ –†–∞–∑–º–µ—Ä –¥–æ–º–∞—à–Ω–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:${NC}"
for user_home in /home/*; do
    if [ -d "$user_home" ]; then
        user=$(basename "$user_home")
        user_size=$(du -sh "$user_home" 2>/dev/null | cut -f1)
        echo "   $user: $user_size"
    fi
done

echo ""
echo "üîç –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò"
echo "==============="

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—á–∏—Å—Ç–∫–µ
echo -e "${GREEN}üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—á–∏—Å—Ç–∫–µ:${NC}"
echo "   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Docker: docker system prune -a"
echo "   2. –û—á–∏—Å—Ç–∏—Ç–µ –ª–æ–≥–∏: find /var/log -name '*.log' -delete"
echo "   3. –û—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à: rm -rf /var/cache/*"
echo "   4. –û—á–∏—Å—Ç–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: rm -rf /tmp/* /var/tmp/*"
echo "   5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã: find / -atime +30 -type f"

echo ""
echo "üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê"
echo "======================"

# –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
total_files=$(find / -type f 2>/dev/null | wc -l)
total_dirs=$(find / -type d 2>/dev/null | wc -l)
total_size=$(du -sh / 2>/dev/null | cut -f1)

echo "   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: $total_files"
echo "   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: $total_dirs"
echo "   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: $total_size"

echo ""
echo "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!"


